{"version":3,"sources":["components/TodoTasks/index.js","components/FinishedTasks/index.js","components/Lists/index.js","App.js","reducers/todolists/index.js","reducers/index.js","index.js"],"names":["useStyles","makeStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","marginTop","marginBottom","TodoTasks","classes","React","useState","checked","setChecked","taskName","setTaskName","todolists","useSelector","state","dispatch","useDispatch","handleToggle","value","currentIndex","indexOf","newChecked","push","splice","type","data","Id","IsActive","handleAdd","useCallback","Math","random","Name","DateCreated","DateFinished","handleTaskNameUpdate","text","taskId","console","log","tasks","TodoLists","filter","list","activeListId","List","className","length","Tasks","item","map","labelId","ListItem","key","role","undefined","dense","button","ListItemIcon","Checkbox","edge","tabIndex","disableRipple","inputProps","onClick","TextField","primary","onChange","e","target","JSON","stringify","Button","variant","FinishedTasks","formControl","margin","spacing","minWidth","selectEmpty","Lists","lists","newlist","setState","open","setOpen","handleClose","handleAddList","val","rand","Date","handleUpdateList","Fragment","FormControl","InputLabel","htmlFor","Select","native","age","event","name","id","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","autoFocus","label","fullWidth","DialogActions","color","Header","props","isOpened","setIsOpened","to","connect","addList","style","float","padding","CssBaseline","Container","path","component","initialState","action","Object","assign","concat","task","combineReducers","store","createStore","reducer","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.284c755c.chunk.js","sourcesContent":["import React, { useCallback } from 'react';\nimport './style.scss';\nimport { Checkbox, Button, List, ListItem, ListItemIcon, ListItemText, ListItemSecondaryAction, makeStyles, Input, TextField } from '@material-ui/core';\nimport { useSelector, useDispatch } from 'react-redux';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n      width: '100%',\n      maxWidth: 360,\n      backgroundColor: theme.palette.background.paper,\n      marginTop: '10px',\n      marginBottom: '10px',\n    },\n  }));\n  \nfunction TodoTasks(){\n    const classes = useStyles();\n\n    const [checked, setChecked] = React.useState([0]);\n    const [taskName, setTaskName] = React.useState(\"\");\n\n    const todolists = useSelector(state => state.todolists);\n    const dispatch = useDispatch();\n\n    const handleToggle = value => () => {\n        const currentIndex = checked.indexOf(value);\n        const newChecked = [...checked];\n\n        if (currentIndex === -1) {\n            newChecked.push(value);\n        } else {\n            newChecked.splice(currentIndex, 1);\n        }\n\n        setChecked(newChecked);\n\n        dispatch({ \n            type: 'FINISH_TASK', \n            data: {\n                Id: value.Id,\n                IsActive: false,\n            }\n        });\n\n    };\n\n    const handleAdd = useCallback(() => dispatch({ \n        type: 'ADD_TASK', \n        data: {\n            Id: Math.random(),\n            IsActive: true,\n            Name: \"\",\n            DateCreated: \"\",\n            DateFinished: \"\"\n        }\n      }), [dispatch]);\n\n    const addTask = () => {\n        handleAdd();\n    };\n\n\n    const handleTaskName = (text, taskId)=>{\n        console.log('test1='+JSON.stringify(taskName))\n        setTaskName(...taskName,text);\n        console.log('test2='+JSON.stringify(taskName))\n        \n        handleTaskNameUpdate(text, taskId);\n    };\n\n    const handleTaskNameUpdate = (text, taskId) => {\n        console.log('text='+text);\n        dispatch({ \n        type: 'UPDATE_TASK', \n        data: {\n            Id: taskId,\n            Name: text,\n        }\n      })};\n\n    const tasks = todolists.TodoLists.filter(list=>(list.Id==todolists.activeListId))[0];\n    return (\n        <div>\n            <h3>TODO Tasks</h3>\n\n            <List className={classes.root}>\n                {tasks && tasks.length!=0 && tasks.Tasks.filter(item=>(item.IsActive)).map(value => {\n                    const labelId = `checkbox-list-label-${value}`;\n\n                    return (\n                    <ListItem key={value.Id+''} role={undefined} dense button>\n                        <ListItemIcon>\n                        <Checkbox\n                            edge=\"start\"\n                            checked={checked.indexOf(value) !== -1}\n                            tabIndex={-1}\n                            disableRipple\n                            inputProps={{ 'aria-labelledby': labelId }}\n                            onClick={handleToggle(value)}\n                        />\n                        </ListItemIcon>\n                        <TextField key={value.Id} primary={``}\n                            value={value.Name} onChange={(e)=>handleTaskName(e.target.value, value.Id)}/>\n                        \n                    </ListItem>\n                    );\n                })}\n            </List>\n            {\n             todolists.activeListId!==0 &&\n                <Button variant=\"contained\" onClick={()=>addTask()}>+ Add task</Button>\n            }\n            {\n             todolists.activeListId===0 &&\n                <label>Please select task list</label>\n            }\n        </div>\n    );\n}\nexport default TodoTasks;","import React from 'react';\nimport './style.scss';\nimport { Checkbox, List, ListItem, ListItemIcon, ListItemText, makeStyles, Button } from '@material-ui/core';\nimport { useSelector } from 'react-redux';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n      width: '100%',\n      maxWidth: 360,\n      backgroundColor: theme.palette.background.paper,\n      marginTop: '10px',\n      marginBottom: '10px',\n    },\n  }));\n  \nfunction FinishedTasks(){\n    const classes = useStyles();\n\n    const todolists = useSelector(state => state.todolists);\n    \n    const tasks = todolists.TodoLists.filter(list=>(list.Id==todolists.activeListId))[0];\n    return (\n        <div>\n            <h3>Finished Tasks</h3>\n\n            <List className={classes.root}>\n                {tasks && tasks.length!=0 && tasks.Tasks.filter(item=>(!item.IsActive)).map(value => {\n                    return (\n                    <ListItem key={value.Id+''} role={undefined} dense button>\n                        <s>{value.Name}</s>                        \n                    </ListItem>\n                    );\n                })}\n            </List>\n            \n        </div>\n    );\n}\nexport default FinishedTasks;","import React, {useCallback} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { Button, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions } from '@material-ui/core';\nimport { connect, useSelector, useDispatch } from 'react-redux';\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  }\n}));\n\nexport const Lists = () => {\n    const classes = useStyles();\n    const [state, setState] = React.useState({\n        lists: '',\n        newlist: ''\n      });\n\n    const [open, setOpen] = React.useState(false);\n    const todolists = useSelector(state => state.todolists);\n    const dispatch = useDispatch();\n    \n    \n    const handleClickOpen = () => {\n      setOpen(true);\n    };\n\n    const handleClose = () => {\n      setOpen(false);\n    };\n\n    const handleAddList = useCallback((val, rand) => dispatch({ \n        type: 'ADD_LIST', \n        data: {\n          Id: rand,\n          IsActive: true,\n          Name: val,\n          DateCreated: new Date(),\n          DateFinished: \"\",\n          Tasks: []\n        }\n      }), [dispatch]);\n\n    const handleUpdateList = useCallback((val) => dispatch({\n        type: 'UPDATE_ACTIVE_LIST', \n        data: {\n          value: val\n        }\n      }), [dispatch]);\n\n    const handleAddListInit = ()=>{\n      handleClose();\n      const val = state.newlist;\n      const rand = Math.random();\n      handleAddList(val, rand);\n      handleUpdateList(rand);\n      setState({newlist: ''});\n    }\n\n    const handleChange = (event) => {     \n      handleUpdateList(event.target.value);\n    };\n\n\n\n    return (\n        <React.Fragment>\n            <FormControl className={classes.formControl}>\n                <InputLabel htmlFor=\"lists-native-simple\">List of tasks</InputLabel>\n                <Select\n                    native\n                    value={state.age}\n                    onChange={handleChange}\n                    value = {todolists.activeListId}\n                    className=\"listSelect\"\n                    // style={{width: '170px'}}\n                    inputProps={{\n                    name: 'lists',\n                    id: 'lists-native-simple',\n                    }}\n                >\n                  {\n                    todolists.TodoLists.map(item=>{\n                      return (<option value={item.Id} key={item.Id}>{item.Name}</option>);\n                    })\n                  }\n                </Select>\n                \n            </FormControl>\n            <Button variant=\"contained\" className={classes.selectEmpty} onClick={handleClickOpen}>Add list</Button>\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                  <DialogTitle id=\"form-dialog-title\">Add new list</DialogTitle>\n                  <DialogContent>\n                    <TextField\n                      autoFocus\n                      margin=\"dense\"\n                      id=\"name\"\n                      label=\"List name\"\n                      type=\"listname\"\n                      fullWidth\n                      value={state.newlist}\n                      onChange={e => setState({\n                        ...state, newlist: e.target.value\n                      }) }\n                    />\n                  </DialogContent>\n                  <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                      Cancel\n                    </Button>\n                    <Button onClick={handleAddListInit} color=\"primary\">\n                      Add\n                    </Button>\n                  </DialogActions>\n                </Dialog>\n        </React.Fragment>\n    );\n  }\n  export default Lists;","import React, { useState } from 'react';\nimport './App.css';\nimport { BrowserRouter, Switch, Route, Link} from 'react-router-dom';\nimport TodoTasks from './components/TodoTasks';\nimport FinishedTasks from './components/FinishedTasks';\nimport Lists from './components/Lists';\nimport { CssBaseline, Container } from '@material-ui/core';\nimport { connect } from 'react-redux';\n\n\nfunction App() {\n  return (\n    <div>\n      <BrowserRouter>\n      \n        <div style={{float: 'left', 'width':\"30%\"}}>\n          <Header />\n        </div>\n      \n        <div style={{float: 'left', marginTop: '50px', padding: '30px'}}>\n          <CssBaseline />\n          <Container maxWidth=\"sm\">\n            <Lists />\n              <Switch>\n                <Route path='/todotasks' component={TodoTasks}/>\n                <Route path='/finishedTasks' component={FinishedTasks}/>\n              </Switch>                \n          </Container>\n        </div>\n\n      </BrowserRouter>\n    </div>\n  );\n}\n\nfunction Header (props){\n\n  const [isOpened, setIsOpened] = useState(false); \n\n  return(\n      <nav>\n          <div className=\"menuToggle\">\n              <input type=\"checkbox\"   onClick={()=>setIsOpened(!isOpened)}/>\n              \n              <span className={isOpened?'isOpened first':'first'}></span>\n              <span className={isOpened?'isOpened second':'second'} id='second'></span>\n              <span className={isOpened?'isOpened third':'third'} id='third'></span>\n              \n                <ul className=\"menu\">\n                  <li><Link to='/todotasks'  onClick={()=>setIsOpened(!isOpened)}>TODO tasks</Link></li>\n                  <li><Link to='/finishedTasks'  onClick={()=>setIsOpened(!isOpened)}>Finished tasks</Link></li>\n                </ul>\n          </div>\n      </nav>\n      );\n}\nexport default connect(\n  state => ({\n    todolists: state.todolists\n  }),\n  dispatch => ({\n    addList: list => {\n      dispatch({ type: \"ADD_LIST\", data: list });\n    }\n  }))(App);\n","const initialState = {\n    TodoLists: [],\n    activeListId: 0\n};\n\nconst list = {\n    Id: 0,\n    IsActive: true,\n    Name: \"\",\n    DateCreated: \"\",\n    DateFinished: \"\",\n    Tasks: []\n};\n\n\nconst todolists = (state = initialState, action) => {\n    switch (action.type) {\n        case 'ADD_LIST': {\n            return Object.assign({}, state, {\n                TodoLists: state.TodoLists.concat(action.data)\n            });\n        }\n        case 'UPDATE_ACTIVE_LIST': {\n            state.activeListId = action.data.value;\n            return {...state};\n        }\n        case 'ADD_TASK': {\n            state.TodoLists.filter(list=>(list.Id == state.activeListId))[0].Tasks.push(action.data);\n            return {...state};\n        }\n        case 'UPDATE_TASK': {\n            state.TodoLists.filter(list=>(list.Id == state.activeListId))[0].Tasks.filter(task=>(task.Id == action.data.Id))[0].Name = action.data.Name;\n            return {...state};\n        }\n        case 'FINISH_TASK': {\n            state.TodoLists.filter(list=>(list.Id == state.activeListId))[0].Tasks.filter(task=>(task.Id == action.data.Id))[0].IsActive = action.data.IsActive;\n            return {...state};\n        }\n        default:\n            break;\n    }\n    return {...state};\n}\n\nexport default todolists;","import {\n    combineReducers\n} from 'redux';\nimport todolists from './todolists';\n\nexport default combineReducers({\n    todolists\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport reducer from \"./reducers\";\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\n\nconst store = createStore(\n    reducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  );\n  \n  ReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById(\"root\")\n  );\n  "],"sourceRoot":""}